import {Code} from "../../../src/components/Code";
import {BlockQuote} from "../../../src/components/BlockQuote/BlockQuote";
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# 렌더와 커밋

컴포넌트가 화면에 나타나기 전에 그 컴포넌트들은 React에 의해 렌더링되어야만 합니다.
이 과정의 단계들을 이해하는 것은 여러분이 코드가 실행되는 방식에 대해 생각하고 코드의 양상에 대해서도 설명할 수 있도록 도울 것입니다.

:::note You will Learn
- React에서 렌더링이 의미하는 것
- React가 컴포넌트를 렌더링하는 장소와 이유
- 컴포넌트를 화면에 표시하는 것을 포함한 단계들
- 렌더링이 DOM 업데이트를 항상 만들어내지 않는 이유
:::

컴포넌트가 재료들로 맛있는 요리를 조합해서 만드는 주방 속 요리들이라고 상상해 보세요. 이 상황에서 React는 손님들의 요구에 맞추어 음식을 주문하고 가져다 놓는 웨이터입니다. UI를 요청하고 나타내는 과정은 세가지 단계로 이루어져 있습니다:

1. 렌더를 **트리거**합니다(주방에 손님의 주문을 전달합니다)
2. 컴포넌트를 **렌더링**합니다(주방에서 주문을 준비합니다)
3. DOM에 **커밋**합니다(탁자에 주문을 올려놓습니다)

<img width="1200" alt="image" src="https://user-images.githubusercontent.com/55529617/194879340-c26ee78e-be87-45cd-9955-829330ce5132.png" />

## 단계 1: 렌더링을 트리거합니다

컴포넌트가 렌더링하는 두가지 이유가 있습니다.

1. 컴포넌트의 **초기 렌더링**입니다.
2. 컴포넌트의(또는 컴포넌트의 조상 컴포넌트 중 하나의) **상태가 업데이트됩니다**.

### 초기 렌더링

앱이 시작할 때, 초기 렌더링을 트리거해야 할 필요가 있습니다. 프레임워크와 sandbox는 가끔 이 코드를 숨기지만 목표 DOM 노드를 [`createRoot`](https://beta.reactjs.org/apis/react-dom/client/createRoot)로 부른 뒤 `render` 방식으로 컴포넌트를 부르면 됩니다.

<Code src="https://codesandbox.io/s/d5dgp5?file=/index.js&utm_medium=sandpack" />

`root.render()`를 코드에서 삭제해보고 컴포넌트가 사라지는 걸 관찰하세요!

### 상태가 업데이트될 때 리렌더링하기

컴포넌트가 초기에 렌더링된 경우, [`set` 함수](https://beta.reactjs.org/apis/react/useState#setstate)으로 컴포넌트의 상태를 업데이트함으로서 렌더링을 트리거할 수 있습니다. 
컴포넌트의 상태를 업데이트하는 것은 자동으로 렌더링을 쌓습니다. (레스토랑 손님이 그들의 목마름 또는 배고픔의 상태에 따라서 첫번째 주문을 넣은 이후에 티, 디저트, 그리고 모든 종류의 것들을 주문한 것으로 생각할 수 있습니다.)

<img width="1200" alt="image" src="https://user-images.githubusercontent.com/55529617/194879422-2a03c10a-f84a-4df9-9bd1-bd36431cf43a.png" />

## 단계 2: React는 컴포넌트를 렌더링합니다

렌더링을 트리거한 후에 React는 화면에 무엇을 표시할지 알아내기 위해 컴포넌트를 부릅니다. "**렌더링**"은 React가 컴포넌트를 부르는 것입니다.

- **초기 렌더링에서** React는 root 컴포넌트를 부를 것입니다.
- **순차적인 렌더링**에서 React는 상태가 업데이트되어 렌더링을 트리거한 컴포넌트 함수를 부를 것입니다.

이 과정은 재귀적입니다: 만약 업데이트된 컴포넌트가 또다른 컴포넌트를 반환한다면, React는 *그* 컴포넌트를 다음에 렌더링할 것입니다, 그리고 그 컴포넌트가 또한 무언가를 반환하게 된다면, 다음에 *그* 컴포넌트를 렌더링할 것이고, 계속해서 이어질 것입니다.
그 과정은 더 이상 중첩된 컴포넌트가 없을때까지 계속해서 일어날 것이고 React는 정확하게 화면에 무엇이 표시되어야 하는지 알고있습니다.

다음 예시에서, React는 `Gallery()`와 `Image()`를 몇 번 부를 것입니다:

<Code src="https://codesandbox.io/s/9m97rn?file=%2FGallery.js&utm_medium=sandpack" />

- **초기 렌더링동안**, React는 `<section>`, `<h1>`, 그리고 세개의 `<img>` 태그들에 대해서 [DOM 노드를 만들어낼](https://developer.mozilla.org/ko/docs/Web/API/Document/createElement) 것입니다.
- **리렌더링하는 동안**, React는 이전 렌더링이후 어떤 요소들이 변화했는지 계산할 것입니다. React는 커밋 단계인 다음 단계까지 그 정보를 이용해 어떤 것도 하지 않습니다.

:::danger Pitfall
렌더링은 항상 [순수한 계산](https://beta.reactjs.org/learn/keeping-components-pure)이어야 합니다:

- **같은 입력, 같은 출력**. 같은 입력을 주었다면, 컴포넌트는 항상 같은 JSX를 반환해야 합니다. (토마토가 들어있는 샐러드를 누군가 주문했을 때, 그들은 양파가 들어있는 샐러드를 받아서는 안됩니다!)
- **자신의 일에만 신경씁니다**. React는 이전 렌더링에 있었던 어떤 객체나 변수를 변경하지 않아야 합니다. (누군가의 주문은 또다른 누군가의 주문으로 변경되어서는 안됩니다.)

다른 한편으로, 여러분은 여러분의 코드가 복잡해질수록 혼란스러운 버그와 예측할 수 없는 행동을 마주칠 수 있습니다.
"Strict Mode"에서 개발할 때, React는 각각의 컴포넌트 함수를 두 번 부릅니다, 그리고 그것은 순수하지 않은 함수들에 의해 야기되는 표면적인 실수들을 방지하는 데 도움을 줍니다.
:::

:::info Deep Dive
### 성능 최적화

업데이트된 컴포넌트 내부의 중첩된 모든 컴포넌트들을 렌더링하는 기본 동작은 만약 업데이트된 컴포넌트가 tree의 매우 높은 곳에 있다면 성능에 최적화되어 있지 않습니다.
성능 문제를 겪고 있다면, 그 문제를 해결할 수 있는 [성능](https://reactjs.org/docs/optimizing-performance.html#gatsby-focus-wrapper) 글에 설명되어 있는 최적화 방식들이 여러가지 있습니다. **너무 일찍 최적화하지 마세요!**
:::

## 단계 3: React는 DOM에 변화들을 커밋합니다

컴포넌트들을 렌더링(부르기)하고나서 React는 DOM을 수정합니다.

- **초기 렌더링동안**, React는 화면에 만들어야 하는 모든 DOM 노드들을 넣기 위해 DOM API인 [`appendChild()`](https://developer.mozilla.org/ko/docs/Web/API/Node/appendChild)를 사용할 것입니다.
- **리렌더링동안**, React는 DOM을 가장 최신의 렌더링 결과와 맞추기 위한 최소한의 필요한 동작(렌더링 동안 계산된!)만을 실행할 것입니다.

**React는 렌더링 사이에 차이점이 있는 경우에만 DOM 노드를 변화시킵니다.** 예를 들어, 매초 부모에게서 다른 prop을 넘겨받아 리렌더링하는 컴포넌트가 있습니다.
`<input>` 속에 문자를 적고, `value`를 업데이트하지만 컴포넌트가 리렌더링할 때, 문자가 사라지지 않는 방식에 주목하세요.

<Code src="https://codesandbox.io/s/7fc59g?file=%2FClock.js&utm_medium=sandpack" />

마지막 단계에서 React는 새로운 `time`과 함께 `<h1>`의 내용물만 업데이트했기 때문에 동작합니다. 마지막 순간에 `<input>`이 JSX의 같은 장소에서 나타나는 것처럼 보이지만 React는 `<input>` 또는 `value`도 건드리지 않습니다!

## 마무리: 브라우저를 페인트하기

렌더링이 끝나고 React가 DOM을 업데이트한 이후, 브라우저는 화면을 다시 재색칠(repaint)합니다. 비록 이 과정이 "브라우저 렌더링"으로 알려져 있지만, 이 문서에서는 혼란을 피하기 위해 "브라우저 렌더링" 대신 "페인팅"으로 부를 것입니다.

<img width="1200" alt="image" src="https://user-images.githubusercontent.com/55529617/194879493-313dedef-0e6d-4c2a-9004-b38405a9bd40.png" />

## 되짚어보기

- React에서 일어나는 화면 업데이트는 다음 세 가지 단계로 일어납니다:
1. 트리거(Trigger)
2. 렌더(Render)
3. 커밋(Commit)

- 컴포넌트에서 실수를 찾기 위해서 Strict Mode를 사용할 수 있습니다
- React는 만약 렌더링 결과가 저번과 똑같다면 DOM을 건드리지 않습니다